
-- Get a list of all the languages, from the language table.
-- select name from language;

-- Get a list of all films joined with their languages – select the following details : film title, description, and language name.
-- select film.title, film.description, language.name
-- from film
-- inner join language
-- on film.language_id = language.language_id;
-- Get all languages, even if there are no films in those languages – select the following details : film title, description, and language name.
-- You'll need to scroll since it does the valid ones first
-- select film.title, film.description, language.name
-- from language
-- left join film
-- on film.language_id = language.language_id;
-- Create a new table called new_film with the following columns : id, name. Add some new films to the table.

-- CREATE TABLE new_film
-- (
-- 	id serial primary key,
-- 	name varchar(50)
-- );
-- insert into new_film (name)
-- values ('Harry Potter'), ('Star Wars'), ('LOTR');

-- Create a new table called customer_review, which will contain film reviews that customers will make.
-- Think about the DELETE constraint: if a film is deleted, its review should be automatically deleted.
-- It should have the following columns:
-- 	review_id – a primary key, non null, auto-increment.
-- 	film_id – references the new_film table. The film that is being reviewed.
-- 	language_id – references the language table. What language the review is in.
-- 	title – the title of the review.
-- 	score – the rating of the review (1-10).
-- 	review_text – the text of the review. No limit on the length.
-- 	last_update – when the review was last updated.
-- CREATE TABLE customer_review
-- (
-- 	review_id SERIAL PRIMARY KEY, --PK includes not null
-- 	film_id INT,
-- 	language_id INT,
-- 	title varchar(50),
-- 	score INT,
-- 	review_text TEXT,
-- 	last_update DATE DEFAULT CURRENT_DATE,
-- 	FOREIGN KEY(film_id) REFERENCES new_film(id) ON DELETE CASCADE,
-- 	FOREIGN KEY(language_id) REFERENCES language(language_id),
-- 	CHECK (score >= 1 AND score <= 10)
-- );
-- select * from customer_review;

-- Add 2 movie reviews. Make sure you link them to valid objects in the other tables.
-- insert into customer_review(film_id, language_id, title, score, review_text)
-- values(1, 1, 'HP Sucks', 2, 'I hate HP! It''s not easy enough to get versions in Hebrew!'),
-- (3, 1, 'Lord of the Rings is amazing', 10, 'I love LOTR!. I wish there was more source material so decent sequels and prequels could be made');

-- Delete a film that has a review from the new_film table, what happens to the customer_review table?
-- select * from customer_review; -- There were 2
-- delete from new_film where id = 1;
-- select * from customer_review; -- there is 1

-- Ex 2

-- Use UPDATE to change the language of some films. Make sure that you use valid languages.
-- UPDATE film set language_id = 2 where title ilike '%ground%';

-- Which foreign keys (references) are defined for the customer table? How does this affect the way in which we INSERT into the customer table?
-- The address must exist in the address table before it is used in an insert into the customer table

-- We created a new table called customer_review. Drop this table. Is this an easy step, or does it need extra checking?
-- drop table customer_review;
-- pretty easy, as nothing is referencing it

-- Find out how many rentals are still outstanding (ie. have not been returned to the store yet).
-- select count(*) from rental where return_date is null

-- Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)
-- select title from 
-- (select distinct film.title, film.replacement_cost
-- from film
-- inner join inventory on film.film_id = inventory.film_id
-- inner join rental on rental.inventory_id = inventory.inventory_id
-- where rental.return_date is null
-- order by film.replacement_cost DESC
-- limit 30) as titles;

-- Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can’t remember their names. Can you help him find which movies he wants to rent?
-- 	The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.
-- select title
-- from film
-- where film_id in 
-- (select film_id from film_actor where actor_id in
-- (select actor_id
-- from actor
-- where first_name = 'Penelope' and last_name = 'Monroe')) and description ilike '%sumo%';


-- 	The 2nd film : A short documentary (less than 1 hour long), rated “R”.
-- select title
-- from film
-- where length < 60 and rating = 'R' and film_id in (select film_id from film_category where category_id in (
-- select category_id from category where name = 'Documentary'));

-- 	The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.
-- select * from rental
-- where customer_id in
-- (select customer_id from customer where first_name = 'Matthew' and last_name = 'Mahan') and return_date <= '2005-08-01' and return_date >= '2005-07-28';
-- select film.title
-- from film
-- inner join inventory
-- on inventory.film_id = film. film_id
-- where inventory.inventory_id in 
-- (select inventory_id 
--  from rental 
--  where customer_id in (select customer_id from customer where first_name = 'Matthew' and last_name = 'Mahan')
--  	and return_date <= '2005-08-01' and return_date >= '2005-07-28'
-- ) 
-- and film.rental_rate > 4;

-- 	The 4th film : His friend Matthew Mahan watched this film, as well. It had the word “boat” in the title or description, and it looked like it was a very expensive DVD to replace.
-- select distinct film.title
-- from film
-- inner join inventory
-- on inventory.film_id = film.film_id
-- where inventory.inventory_id in
-- (select inventory_id 
-- from rental
-- where customer_id in
-- (select customer_id from customer where first_name ='Matthew' and last_name = 'Mahan')
-- )
-- and (film.title ilike '%boat%' or film.description ilike '%boat%')
-- and film.replacement_cost > (select avg(replacement_cost) from film);